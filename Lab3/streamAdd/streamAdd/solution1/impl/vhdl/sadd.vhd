-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sadd is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT1_TVALID : IN STD_LOGIC;
    INPUT1_TREADY : OUT STD_LOGIC;
    INPUT1_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT1_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT2_TVALID : IN STD_LOGIC;
    INPUT2_TREADY : OUT STD_LOGIC;
    INPUT2_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT2_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_r_TVALID : OUT STD_LOGIC;
    OUTPUT_r_TREADY : IN STD_LOGIC;
    OUTPUT_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sadd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sadd_sadd,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.140000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=185,HLS_SYN_LUT=282,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln14_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT2_TDATA_blk_n : STD_LOGIC;
    signal OUTPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal length_r_read_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_193 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_strb_V_reg_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_last_V_reg_203 : STD_LOGIC_VECTOR (0 downto 0);
    signal cur1_data_V_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cur1_data_V_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal i_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_OUTPUT_r_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_INPUT1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT1_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT1_TVALID_int_regslice : STD_LOGIC;
    signal INPUT1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_INPUT1_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT1_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT1_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT1_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT1_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT1_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT1_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT1_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT1_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT1_V_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT1_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT1_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT1_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT2_V_data_V_U_apdone_blk : STD_LOGIC;
    signal INPUT2_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT2_TVALID_int_regslice : STD_LOGIC;
    signal INPUT2_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_INPUT2_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT2_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal INPUT2_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT2_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT2_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT2_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal INPUT2_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_INPUT2_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT2_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_INPUT2_V_last_V_U_apdone_blk : STD_LOGIC;
    signal INPUT2_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_INPUT2_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_INPUT2_V_last_V_U_ack_in : STD_LOGIC;
    signal OUTPUT_r_TVALID_int_regslice : STD_LOGIC;
    signal OUTPUT_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_OUTPUT_r_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sadd_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component sadd_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    CTRL_s_axi_U : component sadd_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        length_r => length_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_INPUT1_V_data_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT1_TDATA,
        vld_in => INPUT1_TVALID,
        ack_in => regslice_both_INPUT1_V_data_V_U_ack_in,
        data_out => INPUT1_TDATA_int_regslice,
        vld_out => INPUT1_TVALID_int_regslice,
        ack_out => INPUT1_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT1_V_data_V_U_apdone_blk);

    regslice_both_INPUT1_V_keep_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT1_TKEEP,
        vld_in => INPUT1_TVALID,
        ack_in => regslice_both_INPUT1_V_keep_V_U_ack_in,
        data_out => INPUT1_TKEEP_int_regslice,
        vld_out => regslice_both_INPUT1_V_keep_V_U_vld_out,
        ack_out => INPUT1_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT1_V_keep_V_U_apdone_blk);

    regslice_both_INPUT1_V_strb_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT1_TSTRB,
        vld_in => INPUT1_TVALID,
        ack_in => regslice_both_INPUT1_V_strb_V_U_ack_in,
        data_out => INPUT1_TSTRB_int_regslice,
        vld_out => regslice_both_INPUT1_V_strb_V_U_vld_out,
        ack_out => INPUT1_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT1_V_strb_V_U_apdone_blk);

    regslice_both_INPUT1_V_last_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT1_TLAST,
        vld_in => INPUT1_TVALID,
        ack_in => regslice_both_INPUT1_V_last_V_U_ack_in,
        data_out => INPUT1_TLAST_int_regslice,
        vld_out => regslice_both_INPUT1_V_last_V_U_vld_out,
        ack_out => INPUT1_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT1_V_last_V_U_apdone_blk);

    regslice_both_INPUT2_V_data_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT2_TDATA,
        vld_in => INPUT2_TVALID,
        ack_in => regslice_both_INPUT2_V_data_V_U_ack_in,
        data_out => INPUT2_TDATA_int_regslice,
        vld_out => INPUT2_TVALID_int_regslice,
        ack_out => INPUT2_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT2_V_data_V_U_apdone_blk);

    regslice_both_INPUT2_V_keep_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT2_TKEEP,
        vld_in => INPUT2_TVALID,
        ack_in => regslice_both_INPUT2_V_keep_V_U_ack_in,
        data_out => INPUT2_TKEEP_int_regslice,
        vld_out => regslice_both_INPUT2_V_keep_V_U_vld_out,
        ack_out => INPUT2_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT2_V_keep_V_U_apdone_blk);

    regslice_both_INPUT2_V_strb_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT2_TSTRB,
        vld_in => INPUT2_TVALID,
        ack_in => regslice_both_INPUT2_V_strb_V_U_ack_in,
        data_out => INPUT2_TSTRB_int_regslice,
        vld_out => regslice_both_INPUT2_V_strb_V_U_vld_out,
        ack_out => INPUT2_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT2_V_strb_V_U_apdone_blk);

    regslice_both_INPUT2_V_last_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => INPUT2_TLAST,
        vld_in => INPUT2_TVALID,
        ack_in => regslice_both_INPUT2_V_last_V_U_ack_in,
        data_out => INPUT2_TLAST_int_regslice,
        vld_out => regslice_both_INPUT2_V_last_V_U_vld_out,
        ack_out => INPUT2_TREADY_int_regslice,
        apdone_blk => regslice_both_INPUT2_V_last_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_data_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => cur1_data_V_reg_208,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => OUTPUT_r_TREADY_int_regslice,
        data_out => OUTPUT_r_TDATA,
        vld_out => regslice_both_OUTPUT_r_V_data_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_data_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_keep_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_keep_V_reg_193,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_keep_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TKEEP,
        vld_out => regslice_both_OUTPUT_r_V_keep_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_keep_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_strb_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_strb_V_reg_198,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_strb_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TSTRB,
        vld_out => regslice_both_OUTPUT_r_V_strb_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_strb_V_U_apdone_blk);

    regslice_both_OUTPUT_r_V_last_V_U : component sadd_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_last_V_reg_203,
        vld_in => OUTPUT_r_TVALID_int_regslice,
        ack_in => regslice_both_OUTPUT_r_V_last_V_U_ack_in_dummy,
        data_out => OUTPUT_r_TLAST,
        vld_out => regslice_both_OUTPUT_r_V_last_V_U_vld_out,
        ack_out => OUTPUT_r_TREADY,
        apdone_blk => regslice_both_OUTPUT_r_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_78 <= ap_const_lv32_0;
            elsif (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_78 <= i_2_fu_141_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cur1_data_V_reg_208 <= cur1_data_V_fu_167_p2;
                tmp_keep_V_reg_193 <= INPUT1_TKEEP_int_regslice;
                tmp_last_V_reg_203 <= INPUT1_TLAST_int_regslice;
                tmp_strb_V_reg_198 <= INPUT1_TSTRB_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                length_r_read_reg_185 <= length_r;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln14_fu_136_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5, regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln14_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln14_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if (((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    INPUT1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln14_fu_136_p2, INPUT1_TVALID_int_regslice)
    begin
        if (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            INPUT1_TDATA_blk_n <= INPUT1_TVALID_int_regslice;
        else 
            INPUT1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT1_TREADY <= regslice_both_INPUT1_V_data_V_U_ack_in;

    INPUT1_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln14_fu_136_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            INPUT1_TREADY_int_regslice <= ap_const_logic_1;
        else 
            INPUT1_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    INPUT2_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln14_fu_136_p2, INPUT2_TVALID_int_regslice)
    begin
        if (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            INPUT2_TDATA_blk_n <= INPUT2_TVALID_int_regslice;
        else 
            INPUT2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT2_TREADY <= regslice_both_INPUT2_V_data_V_U_ack_in;

    INPUT2_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln14_fu_136_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            INPUT2_TREADY_int_regslice <= ap_const_logic_1;
        else 
            INPUT2_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, OUTPUT_r_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            OUTPUT_r_TDATA_blk_n <= OUTPUT_r_TREADY_int_regslice;
        else 
            OUTPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_r_TVALID <= regslice_both_OUTPUT_r_V_data_V_U_vld_out;

    OUTPUT_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            OUTPUT_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln14_fu_136_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, INPUT1_TVALID_int_regslice, INPUT2_TVALID_int_regslice, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT2_TVALID_int_regslice)) or ((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT1_TVALID_int_regslice)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln14_fu_136_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, INPUT1_TVALID_int_regslice, INPUT2_TVALID_int_regslice, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT2_TVALID_int_regslice)) or ((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT1_TVALID_int_regslice)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln14_fu_136_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, INPUT1_TVALID_int_regslice, INPUT2_TVALID_int_regslice, OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT2_TVALID_int_regslice)) or ((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT1_TVALID_int_regslice)))));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln14_fu_136_p2, INPUT1_TVALID_int_regslice, INPUT2_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT2_TVALID_int_regslice)) or ((icmp_ln14_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT1_TVALID_int_regslice)));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice);
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(OUTPUT_r_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter2 <= (ap_const_logic_0 = OUTPUT_r_TREADY_int_regslice);
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln14_fu_136_p2)
    begin
        if ((icmp_ln14_fu_136_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5, regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_OUTPUT_r_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_OUTPUT_r_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cur1_data_V_fu_167_p2 <= std_logic_vector(unsigned(INPUT2_TDATA_int_regslice) + unsigned(INPUT1_TDATA_int_regslice));
    i_2_fu_141_p2 <= std_logic_vector(unsigned(i_fu_78) + unsigned(ap_const_lv32_1));
    icmp_ln14_fu_136_p2 <= "1" when (i_fu_78 = length_r_read_reg_185) else "0";
end behav;
